import os
import time
from pathlib import Path
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver import FirefoxOptions
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.firefox.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException

def load_config():
    env_path = Path(__file__).parent / '.env'
    if not env_path.exists():
        env_path = Path.home() / '.mangabuff' / '.env'
    
    load_dotenv(env_path)

load_config()

CONFIG = {
    'email': os.getenv('EMAIL'),
    'password': os.getenv('PASSWORD'),
    'login_url': os.getenv('LOGIN_URL'),
    'clicker_url': os.getenv('CLICKER_URL'),
    'click_button_selector': os.getenv('CLICK_BUTTON_SELECTOR'),
    'clicks_count': int(os.getenv('CLICKS_COUNT', 100)),
    'delay': float(os.getenv('DELAY_BETWEEN_CLICKS', 0.5)),
    'headless': os.getenv('HEADLESS', 'false').lower() == 'true',
    'timeout': int(os.getenv('TIMEOUT', 30))  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –≤ –∫–æ–Ω—Ñ–∏–≥
}

def validate_config():
    required = ['email', 'password', 'login_url', 'clicker_url', 'click_button_selector']
    for var in required:
        if not CONFIG[var]:
            raise ValueError(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}')

def init_firefox():
    opts = FirefoxOptions()
    if CONFIG['headless']:
        opts.add_argument("--headless")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.set_preference("dom.webdriver.enabled", False)
    opts.set_preference("useAutomationExtension", False)
    service = Service(executable_path='/usr/local/bin/geckodriver')
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Firefox
    driver = webdriver.Firefox(service=service, options=opts)
    driver.set_page_load_timeout(CONFIG['timeout'])
    driver.implicitly_wait(10)
    return driver

def login(driver):
    print("‚åõ –í—ã–ø–æ–ª–Ω—è—é –≤—Ö–æ–¥...")
    try:
        driver.get(CONFIG['login_url'])
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
        WebDriverWait(driver, CONFIG['timeout']).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='email'], input[type='password']"))
        )

        email_field = driver.find_element(By.CSS_SELECTOR, "input[type='email']")
        password_field = driver.find_element(By.CSS_SELECTOR, "input[type='password']")
        submit_btn = driver.find_element(By.CSS_SELECTOR, "button[type='submit'], .login-button")

        email_field.send_keys(CONFIG['email'])
        password_field.send_keys(CONFIG['password'])
        submit_btn.click()

        # –ñ–¥–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–ª–∏–±–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL, –ª–∏–±–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è)
        WebDriverWait(driver, CONFIG['timeout']).until(
            lambda d: d.current_url != CONFIG['login_url'] or
            d.find_elements(By.CSS_SELECTOR, ".user-avatar, .logout-btn, .profile-icon")
        )
        print("‚úì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except TimeoutException:
        print("‚ö† –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞")
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")
        raise

def perform_clicks(driver):
    print(f"üîç –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–ª–∏–∫–µ—Ä–∞: {CONFIG['clicker_url']}")
    driver.get(CONFIG['clicker_url'])
    
    print("üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∏–∫–æ–≤...")
    try:
        button = WebDriverWait(driver, CONFIG['timeout']).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, CONFIG['click_button_selector']))
        )
        
        print(f"üñ±Ô∏è –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω—è—Ç—å {CONFIG['clicks_count']} –∫–ª–∏–∫–æ–≤...")
        for i in range(1, CONFIG['clicks_count'] + 1):
            try:
                button.click()
                print(f"‚úÖ –ö–ª–∏–∫ {i}")
                time.sleep(CONFIG['delay'])
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ {i}: {str(e)}")
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
                button = driver.find_element(By.CSS_SELECTOR, CONFIG['click_button_selector'])
                
    except TimeoutException:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {CONFIG['click_button_selector']}")
        print("‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
        print(driver.page_source[:1000])  # –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç—å HTML –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        raise
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise

def main():
    validate_config()
    driver = None
    
    try:
        driver = init_firefox()
        login(driver)
        perform_clicks(driver)
        print("üéâ –í—Å–µ –∫–ª–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    except KeyboardInterrupt:
        print("\nüõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Ctrl+C)")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}")
    finally:
        if driver:
            driver.quit()
            print("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    main()